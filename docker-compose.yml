services:
  minio:
    image: minio/minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: REDSQUIRREL
      MINIO_ROOT_PASSWORD: YELLOWMONKEY
    volumes:
      - ./data/minio:/data
    entrypoint: sh
    command: -c 'mkdir -p /data/cannonflea && mkdir -p /data/cannonflea-photos && minio server /data -console-address ":9002"'
    ports:
      - 9000:9000
      - 9002:9002
  db:
    image: postgis/postgis:15-3.4-alpine
    restart: unless-stopped
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgis-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: SPAWNPLOW
      POSTGRES_PASSWORD: YELLOWSPATULA
      POSTGRES_DB: bdms
    healthcheck:
      test: "pg_isready -U SPAWNPLOW -d bdms -h db"
      interval: 3s
      timeout: 1s
      retries: 20
      start_period: 25s
  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    ports:
      - 3001:80
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@example.com
      PGADMIN_DEFAULT_PASSWORD: PEEVEDWATER
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - ./config/pgadmin4-servers.json:/pgadmin4/servers.json
    entrypoint:
      - /bin/sh
      - -c
      - |
        /bin/echo '*:*:bdms:SPAWNPLOW:YELLOWSPATULA' > /tmp/.pgpass
        chmod 0600 /tmp/.pgpass
        /entrypoint.sh
    depends_on:
      db:
        condition: service_healthy
  client:
    build:
      context: ./src/client
      target: development
      args:
        - VERSION=0.0.99
        - REVISION=dev
    volumes:
      - .:/app
      - /app/src/client/node_modules
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    environment:
      VITE_APP_PROXY_HOST_API: http://localhost:5000/
    extra_hosts:
      - "localhost:host-gateway"
  api-legacy:
    build:
      context: ./src/api-legacy
      args:
        - VERSION=0.0.99
        - REVISION=dev
    restart: unless-stopped
    ports:
      - 8888:8888
    volumes:
      - ./src/api-legacy:/usr/src/app/bms
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_USERNAME: SPAWNPLOW
      DB_PASSWORD: YELLOWSPATULA
      DB_DATABASE: bdms
      DB_HOST: db
      DB_PORT: 5432
  api:
    build:
      context: ./src
      dockerfile: api/Dockerfile
      target: development
    ports:
      - 5000:5000
    volumes:
      - ./src/api:/src
      - ./src/Directory.Build.props:/Directory.Build.props
      - /src/bin
      - /src/obj
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://127.0.0.1:5000/health || exit 1"
      interval: 20s
      timeout: 10s
      retries: 30
      start_period: 120s
    environment:
      ASPNETCORE_HTTP_PORTS: 5000
      DOTNET_USE_POLLING_FILE_WATCHER: 1
      CONNECTIONSTRINGS__BdmsContext: Host=localhost;Username=SPAWNPLOW;Password=YELLOWSPATULA;Database=bdms;CommandTimeout=300
      ReverseProxy__Clusters__pythonApi__Destinations__legacyApi__Address: "http://localhost:8888/"
      ReverseProxy__Clusters__dataExtractionApi__Destinations__dataExtractionApi__Address: "http://localhost:8000/"
      ReverseProxy__Clusters__ocrApi__Destinations__ocrApi__Address: "http://localhost:5052/"
      Auth__Authority: http://localhost:4011
      Auth__Audience: "bdms-client"
      Auth__GroupClaimType: "local_groups_claim"
      Auth__AuthorizedGroupName: "boreholes_dev_group"
      Auth__AnonymousModeEnabled: false
      S3__ENDPOINT: http://minio:9000
      S3__SECURE: 1
    extra_hosts:
      - "localhost:host-gateway"
  dataextraction:
    image: ghcr.io/swisstopo/swissgeol-boreholes-dataextraction-api:v1.0.30
    restart: unless-stopped
    ports:
      - 8000:8000
    environment:
      AWS_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: REDSQUIRREL
      AWS_SECRET_ACCESS_KEY: YELLOWMONKEY
      AWS_S3_BUCKET: cannonflea
    healthcheck:
      test: "curl --fail http://localhost:8000/health || exit 1"
  ocr:
    # TODO change this to `latest` once it is released.
    image: ghcr.io/swisstopo/swissgeol-ocr-api:edge
    restart: unless-stopped
    volumes:
     - ./.aws/:/root/.aws:ro
    ports:
      - "5052:8000"
    environment:
      TMP_PATH: /tmp/ocr/
      SKIP_PROCESSING: true
      S3_INPUT_ENDPOINT: http://minio:9000
      S3_INPUT_BUCKET: cannonflea
      S3_INPUT_FOLDER: /
      S3_OUTPUT_ENDPOINT: http://minio:9000
      S3_OUTPUT_BUCKET: cannonflea
      S3_OUTPUT_FOLDER: /
      CONFIDENCE_THRESHOLD: 0.45
      USE_AGGRESSIVE_STRATEGY: TRUE
      AWS_PROFILE: default

  oidc-server:
    image: soluto/oidc-server-mock
    restart: unless-stopped
    ports:
      - "4011:80"
    environment:
      CLIENTS_CONFIGURATION_PATH: /tmp/config/clients-config.json
      USERS_CONFIGURATION_PATH: /tmp/config/users-config.json
      IDENTITY_RESOURCES_INLINE: |
        [
          {
            "Name": "local_groups_scope",
            "ClaimTypes": [
              "local_groups_claim"
            ]
          }
        ]
      SERVER_OPTIONS_INLINE: |
        {
          "IssuerUri": "http://localhost:4011",
          "AccessTokenJwtType": "JWT",
          "Discovery": {
            "ShowKeySet": true
          },
          "Authentication": {
            "CookieSameSiteMode": "Lax",
            "CheckSessionCookieSameSiteMode": "Lax"
          }
        }
    volumes:
      - ./config/oidc-mock-clients.json:/tmp/config/clients-config.json:ro
      - ./config/oidc-mock-users.json:/tmp/config/users-config.json:ro

volumes:
  postgis-data:
