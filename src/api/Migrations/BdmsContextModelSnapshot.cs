// <auto-generated />
using System;
using BDMS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BDMS.Migrations
{
    [DbContext(typeof(BdmsContext))]
    partial class BdmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bdms")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BDMS.Models.Backfill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CasingId")
                        .HasColumnType("integer")
                        .HasColumnName("casing_id");

                    b.Property<int>("CompletionId")
                        .HasColumnType("integer")
                        .HasColumnName("completion_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth");

                    b.Property<bool>("IsOpenBorehole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open_borehole");

                    b.Property<int?>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CasingId");

                    b.HasIndex("CompletionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("KindId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("backfill", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_bho");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text")
                        .HasColumnName("alternate_name_bho");

                    b.Property<string>("Canton")
                        .HasColumnType("text")
                        .HasColumnName("canton_bho");

                    b.Property<int?>("ChronostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("chronostrat_id_cli");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country_bho");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_bho");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_bho");

                    b.Property<int?>("ElevationPrecisionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_elevation_id_cli");

                    b.Property<double?>("ElevationZ")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_z_bho");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry")
                        .HasColumnName("geom_bho");

                    b.Property<bool?>("HasGroundwater")
                        .HasColumnType("boolean")
                        .HasColumnName("groundwater_bho");

                    b.Property<int?>("HrsId")
                        .HasColumnType("integer")
                        .HasColumnName("hrs_id_cli");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("public_bho");

                    b.Property<int?>("LithologyTopBedrockId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_top_bedrock_id_cli");

                    b.Property<int?>("LithostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithostrat_id_cli");

                    b.Property<int?>("LocationPrecisionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_location_id_cli");

                    b.Property<double?>("LocationX")
                        .HasColumnType("double precision")
                        .HasColumnName("location_x_bho");

                    b.Property<double?>("LocationXLV03")
                        .HasColumnType("double precision")
                        .HasColumnName("location_x_lv03_bho");

                    b.Property<double?>("LocationY")
                        .HasColumnType("double precision")
                        .HasColumnName("location_y_bho");

                    b.Property<double?>("LocationYLV03")
                        .HasColumnType("double precision")
                        .HasColumnName("location_y_lv03_bho");

                    b.Property<DateTime?>("Locked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_bho");

                    b.Property<int?>("LockedById")
                        .HasColumnType("integer")
                        .HasColumnName("locked_by_bho");

                    b.Property<string>("Municipality")
                        .HasColumnType("text")
                        .HasColumnName("municipality_bho");

                    b.Property<bool?>("NationalInterest")
                        .HasColumnType("boolean")
                        .HasColumnName("national_interest");

                    b.Property<string>("OriginalName")
                        .HasColumnType("text")
                        .HasColumnName("original_name_bho");

                    b.Property<int?>("OriginalReferenceSystem")
                        .HasColumnType("integer")
                        .HasColumnName("srs_id_cli");

                    b.Property<int?>("PrecisionLocationX")
                        .HasColumnType("integer")
                        .HasColumnName("precision_location_x");

                    b.Property<int?>("PrecisionLocationXLV03")
                        .HasColumnType("integer")
                        .HasColumnName("precision_location_x_lv03");

                    b.Property<int?>("PrecisionLocationY")
                        .HasColumnType("integer")
                        .HasColumnName("precision_location_y");

                    b.Property<int?>("PrecisionLocationYLV03")
                        .HasColumnType("integer")
                        .HasColumnName("precision_location_y_lv03");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text")
                        .HasColumnName("project_name_bho");

                    b.Property<int?>("PurposeId")
                        .HasColumnType("integer")
                        .HasColumnName("purpose_id_cli");

                    b.Property<int?>("QtDepthId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_depth_id_cli");

                    b.Property<int?>("QtReferenceElevationId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_reference_elevation_id_cli");

                    b.Property<double?>("ReferenceElevation")
                        .HasColumnType("double precision")
                        .HasColumnName("reference_elevation_bho");

                    b.Property<int?>("ReferenceElevationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_elevation_type_id_cli");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks_bho");

                    b.Property<int?>("RestrictionId")
                        .HasColumnType("integer")
                        .HasColumnName("restriction_id_cli");

                    b.Property<DateTime?>("RestrictionUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("restriction_until_bho");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id_cli");

                    b.Property<double?>("TopBedrockFreshMd")
                        .HasColumnType("double precision")
                        .HasColumnName("top_bedrock_fresh_md");

                    b.Property<double?>("TopBedrockWeatheredMd")
                        .HasColumnType("double precision")
                        .HasColumnName("top_bedrock_weathered_md");

                    b.Property<double?>("TotalDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("total_depth_bho");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_type_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_bho");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_bho");

                    b.Property<int?>("WorkgroupId")
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp_fk");

                    b.HasKey("Id");

                    b.HasIndex("ChronostratigraphyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ElevationPrecisionId");

                    b.HasIndex("HrsId");

                    b.HasIndex("LithologyTopBedrockId");

                    b.HasIndex("LithostratigraphyId");

                    b.HasIndex("LocationPrecisionId");

                    b.HasIndex("LockedById");

                    b.HasIndex("PurposeId");

                    b.HasIndex("QtDepthId");

                    b.HasIndex("QtReferenceElevationId");

                    b.HasIndex("ReferenceElevationTypeId");

                    b.HasIndex("RestrictionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkgroupId");

                    b.ToTable("borehole", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeCodelist", b =>
                {
                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("identifier_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier_value");

                    b.HasKey("BoreholeId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("borehole_identifiers_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeFile", b =>
                {
                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("id_fil_fk");

                    b.Property<DateTime?>("Attached")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("attached_bfi");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_bfi");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_bfi");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description_bfi");

                    b.Property<bool?>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public_bfi");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_bfi");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_bfi");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("BoreholeId", "FileId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FileId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("borehole_files", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeGeometryElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_id");

                    b.Property<double?>("DEVI")
                        .HasColumnType("double precision");

                    b.Property<double?>("HAZI")
                        .HasColumnType("double precision");

                    b.Property<double>("MD")
                        .HasColumnType("double precision");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.Property<double>("Z")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.ToTable("borehole_geometry", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Casing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompletionId")
                        .HasColumnType("integer")
                        .HasColumnName("completion_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<DateOnly?>("DateFinish")
                        .HasColumnType("date")
                        .HasColumnName("date_finish");

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CompletionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("casing", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.CasingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CasingId")
                        .HasColumnType("integer")
                        .HasColumnName("casing_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth");

                    b.Property<double?>("InnerDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("inner_diameter");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<double?>("OuterDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("outer_diameter");

                    b.Property<double>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CasingId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("KindId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("casing_element", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.ChronostratigraphyLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_chr");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChronostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("chronostratigraphy_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("ChronostratigraphyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("chronostratigraphy", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Codelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_cli");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_cli");

                    b.Property<string>("Conf")
                        .HasColumnType("text")
                        .HasColumnName("conf_cli");

                    b.Property<string>("De")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_de");

                    b.Property<string>("En")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_cli_en");

                    b.Property<string>("Fr")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_fr");

                    b.Property<int?>("Geolcode")
                        .HasColumnType("integer")
                        .HasColumnName("geolcode");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("default_cli");

                    b.Property<string>("It")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_it");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_cli");

                    b.Property<string>("Path")
                        .HasColumnType("ltree")
                        .HasColumnName("path_cli");

                    b.Property<string>("Ro")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_ro");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema_cli");

                    b.HasKey("Id");

                    b.ToTable("codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Completion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AbandonDate")
                        .HasColumnType("date")
                        .HasColumnName("abandon_date");

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("KindId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("completion", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Config", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name_cfg");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value_cfg");

                    b.HasKey("Name");

                    b.ToTable("config", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.FaciesDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_fac");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DescriptionQualityId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DescriptionQualityId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("facies_description", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.FieldMeasurementResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<int>("FieldMeasurementId")
                        .HasColumnType("integer")
                        .HasColumnName("fieldmeasurement_id");

                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter");

                    b.Property<int>("SampleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("sample_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FieldMeasurementId");

                    b.HasIndex("ParameterId");

                    b.HasIndex("SampleTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("fieldmeasurement_result", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_fil");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_fil");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_fil");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_fil");

                    b.Property<string>("NameUuid")
                        .HasColumnType("text")
                        .HasColumnName("name_uuid_fil");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_fil");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_fil");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_fil");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("files", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestEvaluationMethodCode", b =>
                {
                    b.Property<int>("HydrotestId")
                        .HasColumnType("integer")
                        .HasColumnName("hydrotest_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("codelist_id");

                    b.HasKey("HydrotestId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("hydrotest_evaluationmethod_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestFlowDirectionCode", b =>
                {
                    b.Property<int>("HydrotestId")
                        .HasColumnType("integer")
                        .HasColumnName("hydrotest_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("codelist_id");

                    b.HasKey("HydrotestId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("hydrotest_flowdirection_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestKindCode", b =>
                {
                    b.Property<int>("HydrotestId")
                        .HasColumnType("integer")
                        .HasColumnName("hydrotest_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("codelist_id");

                    b.HasKey("HydrotestId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("hydrotest_kind_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<int>("HydrotestId")
                        .HasColumnType("integer")
                        .HasColumnName("hydrotest_id");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double precision")
                        .HasColumnName("max_value");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double precision")
                        .HasColumnName("min_value");

                    b.Property<int>("ParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HydrotestId");

                    b.HasIndex("ParameterId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("hydrotest_result", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Instrumentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CasingId")
                        .HasColumnType("integer")
                        .HasColumnName("casing_id");

                    b.Property<int>("CompletionId")
                        .HasColumnType("integer")
                        .HasColumnName("completion_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth");

                    b.Property<bool>("IsOpenBorehole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open_borehole");

                    b.Property<int?>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CasingId");

                    b.HasIndex("CompletionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("KindId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("instrumentation", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_lay");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlterationId")
                        .HasColumnType("integer")
                        .HasColumnName("alteration_id_cli");

                    b.Property<int?>("CohesionId")
                        .HasColumnType("integer")
                        .HasColumnName("cohesion_id_cli");

                    b.Property<int?>("CompactnessId")
                        .HasColumnType("integer")
                        .HasColumnName("compactness_id_cli");

                    b.Property<int?>("ConsistanceId")
                        .HasColumnType("integer")
                        .HasColumnName("consistance_id_cli");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_lay");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator_lay");

                    b.Property<int?>("DescriptionQualityId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id_cli");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from_lay");

                    b.Property<int?>("GradationId")
                        .HasColumnType("integer")
                        .HasColumnName("gradation_id_cli");

                    b.Property<int?>("GrainSize1Id")
                        .HasColumnType("integer")
                        .HasColumnName("grain_size_1_id_cli");

                    b.Property<int?>("GrainSize2Id")
                        .HasColumnType("integer")
                        .HasColumnName("grain_size_2_id_cli");

                    b.Property<int?>("HumidityId")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_id_cli");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("boolean")
                        .HasColumnName("last_lay");

                    b.Property<bool?>("IsStriae")
                        .HasColumnType("boolean")
                        .HasColumnName("striae_lay");

                    b.Property<bool?>("IsUndefined")
                        .HasColumnType("boolean")
                        .HasColumnName("undefined_lay");

                    b.Property<int?>("LithologyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_id_cli");

                    b.Property<int?>("LithologyTopBedrockId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_top_bedrock_id_cli");

                    b.Property<int?>("LithostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithostratigraphy_id_cli");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_lay");

                    b.Property<string>("OriginalLithology")
                        .HasColumnType("text")
                        .HasColumnName("original_lithology");

                    b.Property<string>("OriginalUscs")
                        .HasColumnType("text")
                        .HasColumnName("uscs_original_lay");

                    b.Property<int?>("PlasticityId")
                        .HasColumnType("integer")
                        .HasColumnName("plasticity_id_cli");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to_lay");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_lay");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_lay");

                    b.Property<int?>("Uscs1Id")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_1_id_cli");

                    b.Property<int?>("Uscs2Id")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_2_id_cli");

                    b.Property<int?>("UscsDeterminationId")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_determination_id_cli");

                    b.HasKey("Id");

                    b.HasIndex("AlterationId");

                    b.HasIndex("CohesionId");

                    b.HasIndex("CompactnessId");

                    b.HasIndex("ConsistanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DescriptionQualityId");

                    b.HasIndex("GradationId");

                    b.HasIndex("GrainSize1Id");

                    b.HasIndex("GrainSize2Id");

                    b.HasIndex("HumidityId");

                    b.HasIndex("LithologyId");

                    b.HasIndex("LithologyTopBedrockId");

                    b.HasIndex("LithostratigraphyId");

                    b.HasIndex("PlasticityId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Uscs1Id");

                    b.HasIndex("Uscs2Id");

                    b.HasIndex("UscsDeterminationId");

                    b.ToTable("layer", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerColorCode", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_color_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerDebrisCode", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("debris_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_debris_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerGrainAngularityCode", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("grain_angularity_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_grain_angularity_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerGrainShapeCode", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("grain_shape_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_grain_shape_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerOrganicComponentCode", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("organic_components_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_organic_component_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerUscs3Code", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("uscs3_id");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_uscs3_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LithologicalDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ldp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DescriptionQualityId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DescriptionQualityId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("lithological_description", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LithostratigraphyLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<int?>("LithostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithostratigraphy_id");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("stratigraphy_id");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LithostratigraphyId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("lithostratigraphy", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_id");

                    b.Property<int?>("CasingId")
                        .HasColumnType("integer")
                        .HasColumnName("casing_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<double?>("FromDepthM")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth_m");

                    b.Property<double?>("FromDepthMasl")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth_masl");

                    b.Property<bool>("IsOpenBorehole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open_borehole");

                    b.Property<int?>("ReliabilityId")
                        .HasColumnType("integer")
                        .HasColumnName("reliability");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<double?>("ToDepthM")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth_m");

                    b.Property<double?>("ToDepthMasl")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth_masl");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("observation_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("CasingId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReliabilityId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("observation", "bdms");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BDMS.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("borehole_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("section", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.SectionElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<int?>("CuttingsId")
                        .HasColumnType("integer")
                        .HasColumnName("cuttings_id");

                    b.Property<double?>("DrillingCoreDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("drilling_core_diameter");

                    b.Property<double?>("DrillingDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("drilling_diameter");

                    b.Property<DateOnly?>("DrillingEndDate")
                        .HasColumnType("date")
                        .HasColumnName("drilling_end_date");

                    b.Property<int?>("DrillingMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("drilling_method_id");

                    b.Property<int?>("DrillingMudSubtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("mud_subtype_id");

                    b.Property<int?>("DrillingMudTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("mud_type_id");

                    b.Property<DateOnly?>("DrillingStartDate")
                        .HasColumnType("date")
                        .HasColumnName("drilling_start_date");

                    b.Property<double>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("from_depth");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<double>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("to_depth");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CuttingsId");

                    b.HasIndex("DrillingMethodId");

                    b.HasIndex("DrillingMudSubtypeId");

                    b.HasIndex("DrillingMudTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("section_element", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sty");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_sty");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("author_sty");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_sty");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary_sty");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name_sty");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_sty");

                    b.Property<int?>("QualityId")
                        .HasColumnType("integer")
                        .HasColumnName("quality_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_sty");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_sty");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QualityId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("stratigraphy", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_tes");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_tes");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_tes");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("draft_tes");

                    b.Property<string>("TextDe")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_de");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_tes_en");

                    b.Property<string>("TextFr")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_fr");

                    b.Property<string>("TextIt")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_it");

                    b.Property<string>("TextRo")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_ro");

                    b.HasKey("Id");

                    b.ToTable("terms", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_usr");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disabled_usr");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_usr");

                    b.Property<bool>("IsViewer")
                        .HasColumnType("boolean")
                        .HasColumnName("viewer_usr");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.ToTable("users", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_evs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_evs");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload_evs");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topic_evs");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("events", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.UserWorkgroupRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.Property<int>("WorkgroupId")
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp_fk");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("id_rol_fk");

                    b.HasKey("UserId", "WorkgroupId", "Role");

                    b.ToTable("users_roles", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wkf");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_wkf");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_wkf");

                    b.Property<int?>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("id_rol_fk");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_wkf");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("UserId");

                    b.ToTable("workflow", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Workgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_wgp");

                    b.Property<DateTime?>("Disabled")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disabled_wgp");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("boolean")
                        .HasColumnName("supplier_wgp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_wgp");

                    b.Property<string>("Settings")
                        .HasColumnType("json")
                        .HasColumnName("settings_wgp");

                    b.HasKey("Id");

                    b.ToTable("workgroups", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.FieldMeasurement", b =>
                {
                    b.HasBaseType("BDMS.Models.Observation");

                    b.ToTable("field_measurement", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.GroundwaterLevelMeasurement", b =>
                {
                    b.HasBaseType("BDMS.Models.Observation");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<double?>("LevelM")
                        .HasColumnType("double precision")
                        .HasColumnName("level_m");

                    b.Property<double?>("LevelMasl")
                        .HasColumnType("double precision")
                        .HasColumnName("level_masl");

                    b.HasIndex("KindId");

                    b.ToTable("groundwater_level_measurement", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Hydrotest", b =>
                {
                    b.HasBaseType("BDMS.Models.Observation");

                    b.ToTable("hydrotest", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.WaterIngress", b =>
                {
                    b.HasBaseType("BDMS.Models.Observation");

                    b.Property<int?>("ConditionsId")
                        .HasColumnType("integer")
                        .HasColumnName("conditions");

                    b.Property<int>("QuantityId")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasIndex("ConditionsId");

                    b.HasIndex("QuantityId");

                    b.ToTable("water_ingress", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Backfill", b =>
                {
                    b.HasOne("BDMS.Models.Casing", "Casing")
                        .WithMany("Backfills")
                        .HasForeignKey("CasingId");

                    b.HasOne("BDMS.Models.Completion", "Completion")
                        .WithMany("Backfills")
                        .HasForeignKey("CompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId");

                    b.HasOne("BDMS.Models.Codelist", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Casing");

                    b.Navigation("Completion");

                    b.Navigation("CreatedBy");

                    b.Navigation("Kind");

                    b.Navigation("Material");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Chronostratigraphy")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphyId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "ElevationPrecision")
                        .WithMany()
                        .HasForeignKey("ElevationPrecisionId");

                    b.HasOne("BDMS.Models.Codelist", "Hrs")
                        .WithMany()
                        .HasForeignKey("HrsId");

                    b.HasOne("BDMS.Models.Codelist", "LithologyTopBedrock")
                        .WithMany()
                        .HasForeignKey("LithologyTopBedrockId");

                    b.HasOne("BDMS.Models.Codelist", "Lithostratigraphy")
                        .WithMany()
                        .HasForeignKey("LithostratigraphyId");

                    b.HasOne("BDMS.Models.Codelist", "LocationPrecision")
                        .WithMany()
                        .HasForeignKey("LocationPrecisionId");

                    b.HasOne("BDMS.Models.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");

                    b.HasOne("BDMS.Models.Codelist", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId");

                    b.HasOne("BDMS.Models.Codelist", "QtDepth")
                        .WithMany()
                        .HasForeignKey("QtDepthId");

                    b.HasOne("BDMS.Models.Codelist", "QtReferenceElevation")
                        .WithMany()
                        .HasForeignKey("QtReferenceElevationId");

                    b.HasOne("BDMS.Models.Codelist", "ReferenceElevationType")
                        .WithMany()
                        .HasForeignKey("ReferenceElevationTypeId");

                    b.HasOne("BDMS.Models.Codelist", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionId");

                    b.HasOne("BDMS.Models.Codelist", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("BDMS.Models.Codelist", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.Workgroup", "Workgroup")
                        .WithMany("Boreholes")
                        .HasForeignKey("WorkgroupId");

                    b.Navigation("Chronostratigraphy");

                    b.Navigation("CreatedBy");

                    b.Navigation("ElevationPrecision");

                    b.Navigation("Hrs");

                    b.Navigation("LithologyTopBedrock");

                    b.Navigation("Lithostratigraphy");

                    b.Navigation("LocationPrecision");

                    b.Navigation("LockedBy");

                    b.Navigation("Purpose");

                    b.Navigation("QtDepth");

                    b.Navigation("QtReferenceElevation");

                    b.Navigation("ReferenceElevationType");

                    b.Navigation("Restriction");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Workgroup");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeCodelist", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("BoreholeCodelists")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("BoreholeCodelists")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borehole");

                    b.Navigation("Codelist");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeFile", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("BoreholeFiles")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.File", "File")
                        .WithMany("BoreholeFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("File");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeGeometryElement", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("BoreholeGeometry")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borehole");
                });

            modelBuilder.Entity("BDMS.Models.Casing", b =>
                {
                    b.HasOne("BDMS.Models.Completion", "Completion")
                        .WithMany("Casings")
                        .HasForeignKey("CompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Completion");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.CasingElement", b =>
                {
                    b.HasOne("BDMS.Models.Casing", "Casing")
                        .WithMany("CasingElements")
                        .HasForeignKey("CasingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Casing");

                    b.Navigation("CreatedBy");

                    b.Navigation("Kind");

                    b.Navigation("Material");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.ChronostratigraphyLayer", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Chronostratigraphy")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphyId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("ChronostratigraphyLayers")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Chronostratigraphy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Completion", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Completions")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("Kind");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.FaciesDescription", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "DescriptionQuality")
                        .WithMany()
                        .HasForeignKey("DescriptionQualityId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("FaciesDescriptions")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DescriptionQuality");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.FieldMeasurementResult", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.FieldMeasurement", "FieldMeasurement")
                        .WithMany("FieldMeasurementResults")
                        .HasForeignKey("FieldMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "SampleType")
                        .WithMany()
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("FieldMeasurement");

                    b.Navigation("Parameter");

                    b.Navigation("SampleType");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestEvaluationMethodCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("HydrotestEvaluationMethodCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Hydrotest", "Hydrotest")
                        .WithMany("HydrotestEvaluationMethodCodes")
                        .HasForeignKey("HydrotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Hydrotest");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestFlowDirectionCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("HydrotestFlowDirectionCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Hydrotest", "Hydrotest")
                        .WithMany("HydrotestFlowDirectionCodes")
                        .HasForeignKey("HydrotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Hydrotest");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestKindCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("HydrotestKindCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Hydrotest", "Hydrotest")
                        .WithMany("HydrotestKindCodes")
                        .HasForeignKey("HydrotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Hydrotest");
                });

            modelBuilder.Entity("BDMS.Models.HydrotestResult", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Hydrotest", "Hydrotest")
                        .WithMany("HydrotestResults")
                        .HasForeignKey("HydrotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Hydrotest");

                    b.Navigation("Parameter");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Instrumentation", b =>
                {
                    b.HasOne("BDMS.Models.Casing", "Casing")
                        .WithMany("Instrumentations")
                        .HasForeignKey("CasingId");

                    b.HasOne("BDMS.Models.Completion", "Completion")
                        .WithMany("Instrumentations")
                        .HasForeignKey("CompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId");

                    b.HasOne("BDMS.Models.Codelist", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Casing");

                    b.Navigation("Completion");

                    b.Navigation("CreatedBy");

                    b.Navigation("Kind");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Alteration")
                        .WithMany()
                        .HasForeignKey("AlterationId");

                    b.HasOne("BDMS.Models.Codelist", "Cohesion")
                        .WithMany()
                        .HasForeignKey("CohesionId");

                    b.HasOne("BDMS.Models.Codelist", "Compactness")
                        .WithMany()
                        .HasForeignKey("CompactnessId");

                    b.HasOne("BDMS.Models.Codelist", "Consistance")
                        .WithMany()
                        .HasForeignKey("ConsistanceId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "DescriptionQuality")
                        .WithMany()
                        .HasForeignKey("DescriptionQualityId");

                    b.HasOne("BDMS.Models.Codelist", "Gradation")
                        .WithMany()
                        .HasForeignKey("GradationId");

                    b.HasOne("BDMS.Models.Codelist", "GrainSize1")
                        .WithMany()
                        .HasForeignKey("GrainSize1Id");

                    b.HasOne("BDMS.Models.Codelist", "GrainSize2")
                        .WithMany()
                        .HasForeignKey("GrainSize2Id");

                    b.HasOne("BDMS.Models.Codelist", "Humidity")
                        .WithMany()
                        .HasForeignKey("HumidityId");

                    b.HasOne("BDMS.Models.Codelist", "Lithology")
                        .WithMany()
                        .HasForeignKey("LithologyId");

                    b.HasOne("BDMS.Models.Codelist", "LithologyTopBedrock")
                        .WithMany()
                        .HasForeignKey("LithologyTopBedrockId");

                    b.HasOne("BDMS.Models.Codelist", "Lithostratigraphy")
                        .WithMany()
                        .HasForeignKey("LithostratigraphyId");

                    b.HasOne("BDMS.Models.Codelist", "Plasticity")
                        .WithMany()
                        .HasForeignKey("PlasticityId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("Layers")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.Codelist", "Uscs1")
                        .WithMany()
                        .HasForeignKey("Uscs1Id");

                    b.HasOne("BDMS.Models.Codelist", "Uscs2")
                        .WithMany()
                        .HasForeignKey("Uscs2Id");

                    b.HasOne("BDMS.Models.Codelist", "UscsDetermination")
                        .WithMany()
                        .HasForeignKey("UscsDeterminationId");

                    b.Navigation("Alteration");

                    b.Navigation("Cohesion");

                    b.Navigation("Compactness");

                    b.Navigation("Consistance");

                    b.Navigation("CreatedBy");

                    b.Navigation("DescriptionQuality");

                    b.Navigation("Gradation");

                    b.Navigation("GrainSize1");

                    b.Navigation("GrainSize2");

                    b.Navigation("Humidity");

                    b.Navigation("Lithology");

                    b.Navigation("LithologyTopBedrock");

                    b.Navigation("Lithostratigraphy");

                    b.Navigation("Plasticity");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Uscs1");

                    b.Navigation("Uscs2");

                    b.Navigation("UscsDetermination");
                });

            modelBuilder.Entity("BDMS.Models.LayerColorCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerColorCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerColorCodes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LayerDebrisCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerDebrisCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerDebrisCodes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LayerGrainAngularityCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerGrainAngularityCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerGrainAngularityCodes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LayerGrainShapeCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerGrainShapeCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerGrainShapeCodes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LayerOrganicComponentCode", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerOrganicComponentCodes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerOrganicComponentCodes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LayerUscs3Code", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerUscs3Codes")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerUscs3Codes")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LithologicalDescription", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "DescriptionQuality")
                        .WithMany()
                        .HasForeignKey("DescriptionQualityId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("LithologicalDescriptions")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DescriptionQuality");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.LithostratigraphyLayer", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Lithostratigraphy")
                        .WithMany()
                        .HasForeignKey("LithostratigraphyId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("LithostratigraphyLayers")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lithostratigraphy");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Observation", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Observations")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Casing", "Casing")
                        .WithMany("Observations")
                        .HasForeignKey("CasingId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Reliability")
                        .WithMany()
                        .HasForeignKey("ReliabilityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Borehole");

                    b.Navigation("Casing");

                    b.Navigation("CreatedBy");

                    b.Navigation("Reliability");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Section", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Sections")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.SectionElement", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Cuttings")
                        .WithMany()
                        .HasForeignKey("CuttingsId");

                    b.HasOne("BDMS.Models.Codelist", "DrillingMethod")
                        .WithMany()
                        .HasForeignKey("DrillingMethodId");

                    b.HasOne("BDMS.Models.Codelist", "DrillingMudSubtype")
                        .WithMany()
                        .HasForeignKey("DrillingMudSubtypeId");

                    b.HasOne("BDMS.Models.Codelist", "DrillingMudType")
                        .WithMany()
                        .HasForeignKey("DrillingMudTypeId");

                    b.HasOne("BDMS.Models.Section", "Section")
                        .WithMany("SectionElements")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Cuttings");

                    b.Navigation("DrillingMethod");

                    b.Navigation("DrillingMudSubtype");

                    b.Navigation("DrillingMudType");

                    b.Navigation("Section");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Stratigraphies")
                        .HasForeignKey("BoreholeId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("Quality");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.UserEvent", b =>
                {
                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany("BoringEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.UserWorkgroupRole", b =>
                {
                    b.HasOne("BDMS.Models.User", null)
                        .WithMany("WorkgroupRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDMS.Models.Workflow", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Workflows")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borehole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.FieldMeasurement", b =>
                {
                    b.HasOne("BDMS.Models.Observation", null)
                        .WithOne()
                        .HasForeignKey("BDMS.Models.FieldMeasurement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDMS.Models.GroundwaterLevelMeasurement", b =>
                {
                    b.HasOne("BDMS.Models.Observation", null)
                        .WithOne()
                        .HasForeignKey("BDMS.Models.GroundwaterLevelMeasurement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("BDMS.Models.Hydrotest", b =>
                {
                    b.HasOne("BDMS.Models.Observation", null)
                        .WithOne()
                        .HasForeignKey("BDMS.Models.Hydrotest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDMS.Models.WaterIngress", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Conditions")
                        .WithMany()
                        .HasForeignKey("ConditionsId");

                    b.HasOne("BDMS.Models.Observation", null)
                        .WithOne()
                        .HasForeignKey("BDMS.Models.WaterIngress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Codelist", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conditions");

                    b.Navigation("Quantity");
                });

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.Navigation("BoreholeCodelists");

                    b.Navigation("BoreholeFiles");

                    b.Navigation("BoreholeGeometry");

                    b.Navigation("Completions");

                    b.Navigation("Observations");

                    b.Navigation("Sections");

                    b.Navigation("Stratigraphies");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BDMS.Models.Casing", b =>
                {
                    b.Navigation("Backfills");

                    b.Navigation("CasingElements");

                    b.Navigation("Instrumentations");

                    b.Navigation("Observations");
                });

            modelBuilder.Entity("BDMS.Models.Codelist", b =>
                {
                    b.Navigation("BoreholeCodelists");

                    b.Navigation("HydrotestEvaluationMethodCodes");

                    b.Navigation("HydrotestFlowDirectionCodes");

                    b.Navigation("HydrotestKindCodes");

                    b.Navigation("LayerColorCodes");

                    b.Navigation("LayerDebrisCodes");

                    b.Navigation("LayerGrainAngularityCodes");

                    b.Navigation("LayerGrainShapeCodes");

                    b.Navigation("LayerOrganicComponentCodes");

                    b.Navigation("LayerUscs3Codes");
                });

            modelBuilder.Entity("BDMS.Models.Completion", b =>
                {
                    b.Navigation("Backfills");

                    b.Navigation("Casings");

                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.Navigation("BoreholeFiles");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.Navigation("LayerColorCodes");

                    b.Navigation("LayerDebrisCodes");

                    b.Navigation("LayerGrainAngularityCodes");

                    b.Navigation("LayerGrainShapeCodes");

                    b.Navigation("LayerOrganicComponentCodes");

                    b.Navigation("LayerUscs3Codes");
                });

            modelBuilder.Entity("BDMS.Models.Section", b =>
                {
                    b.Navigation("SectionElements");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.Navigation("ChronostratigraphyLayers");

                    b.Navigation("FaciesDescriptions");

                    b.Navigation("Layers");

                    b.Navigation("LithologicalDescriptions");

                    b.Navigation("LithostratigraphyLayers");
                });

            modelBuilder.Entity("BDMS.Models.User", b =>
                {
                    b.Navigation("BoringEvents");

                    b.Navigation("WorkgroupRoles");
                });

            modelBuilder.Entity("BDMS.Models.Workgroup", b =>
                {
                    b.Navigation("Boreholes");
                });

            modelBuilder.Entity("BDMS.Models.FieldMeasurement", b =>
                {
                    b.Navigation("FieldMeasurementResults");
                });

            modelBuilder.Entity("BDMS.Models.Hydrotest", b =>
                {
                    b.Navigation("HydrotestEvaluationMethodCodes");

                    b.Navigation("HydrotestFlowDirectionCodes");

                    b.Navigation("HydrotestKindCodes");

                    b.Navigation("HydrotestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
